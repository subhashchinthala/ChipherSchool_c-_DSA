// Lecture 59 - Linked List Ii Pt 3

#include<iostream>
using namespace std;

class node
{
  public:

  int data; // Let asssume for now that the data which the linked list is storeing in the data
  node * next;

  node(int data_input)
  {
    this->data = data_input;
    this->next = NULL;
  }

};

// Helper function 

void printnode(node * &node)
{
  cout<<"value "<<node->data;
  cout<<"Address "<<node->next;
}

  void printlinkedlist(node * & head)
  {
    if(head==NULL)
    {

      cout<<"the linked list is still empty "<<endl;
      return

    }

    node *temp;
    temp = head;

    // This is called the transvering of a linked list
    

    while(temp!=NULL)
    {
      cout<<temp->data<<" -->";
      temp = temp->next;

    }
    cout<<endl;
  }

  void Insertatstart(node * head, int data)
  {

    node * temp = new node(data);

    if (head==NULL)
    {

      head = temp;
      return

    }


    temp->next = head;  // where temp is the new head and now, we need to assign the address of the old head to it
    head = temp;

  }

  void Insertatend(node * head, int data)
  {

    node * temp = new node(data);

    if (head==NULL)
    {

      head = temp;
      return
      
    }

    node *end;
    end = head;

    while(end->next!=NULL)
    {
      end = end->next;
    }

    // After this while loop is complete, we have basically reached the end elements after the linked list

    end->next = temp;


  }

  void Insertatmiddleafterwhichelementint(node *& head, int location, int data)
  {


    node *temp = new node(data);

    node *var = head;

    // loop to check whether location exists or not

    while(var->data! = location)
    {
      var = var->next;
      if(var==NuLL)
      {
        cout<<"The location doesnt exist, check the location again "<<endl;
        return;
      }
    }

    // Now var will have the node address  of the elements at which the new data is going to be interend

    temp->next = var->next;
    var->next = temp;
    

  }

  void deletenodeoflinkedlist(node * head, int data)
  {
    if(head->data == data)
    {
      cout<<"The head of the linked list is going to be deleted !! "<<endl;

      head  = head ->next;

      return;
    }

    node * temp;
    node *prev;
    temp = head;

    while(temp->data!=data)
    {

     if(temp->next==NULL)
     {
      cout<<"The elements to be deleted doenst exist "<<endl;
      return;

     }
      prev=temp;
      temp = temp->next;



    }

    if(temp->next == NULL)
    {

      prev->next = NULL;
      return;

    }

    prev->next = prev->next->next;



  }




int main()
{


 // Head of a linked list is nothing but a fancy term to indicate the top or  the first elements of the linked list 

   node * head=NULL;
   
   Insertatend(head,5);
   Insertatend(head,7);
   Insertatend(head,8);

   Insertatstart(head,3);
   Insertatstart(head,2);

   Insertatend(head,9);
   Insertatend(head,10);

   printlinkedlist(head);

   Insertatmiddleafterwhichelementint(head,3,4);
   Insertatmiddleafterwhichelementint(head,5,6);
   // Insertatmiddleafterwhichelementint(head,100,101);

   printlinkedlist(head);

   // Now i want to delete the elements 2,10,6

   deletenodeoflinkedlist(head,2);
   deletenodeoflinkedlist(head,10);
   deletenodeoflinkedlist(head,6);
   deletenodeoflinkedlist(head,100);


   printlinkedlist(head);




   return 0;


}
