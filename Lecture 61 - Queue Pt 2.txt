// Lecture 60 - Queue Pt 1


#include<iostream>
using namespace std;

class Queue
{
  public:



  int queue[1000];
  int max_capacity;
  int front;
  int rear;
  int size;


  Queue()
  {
    this->front = 0;
    this->rear = -1;
    this->max_capacity = 1000;
    this->size=0;


  }

  void enqueue(int data)
  {
    if(size==max_capacity)
    {

      cout<<"Maximum capacity has been reached";
      return;
    }

    rear = (rear+1)%max_capacity;
    queue[rear] = data;
    size++;
    
  }

  void dequeue()
  {
    if(size==0)
    {
      cout<<"the size of the queue is 0 and there are no more elements to dequeue"<<endl;
      return;
    }
    cout<<"the element to be dequeued is"<<queue[front];
    front;
    size--;

  }

  void peekqueue()
  {
    cout<<"The elements at the front of the queue is "<<quue[front]<<endl;

  }

  void sizeofqueue()
  {
    cout<<"The queue currently has "<<size<<"elements in it "<<endl;
  }

};

int main()
{

  Queue q;

  q.enqueue(5);
  q.enqueue(6);
  q.enqueue(7);
  q.enqueue(8);
  q.enqueue(1);
  

  q.dequeue();
  q.dequeue();

  q.peekqueue();

  q.dequeue();
  
   q.peekqueue();
  
  q.dequeue(); // I should get an error because there are no more elements 

  return 0;


}
